

@@@@@@@
DAY-1
@@@@@@@

Containers!!

	Docker Engine
	
	Images vs Containers ?
	


Infra-Structure Team :

	Jenkins - Master Slave Configuration!!!
	
	Jenkins-Master:
		
			Slave1 ===> Build and Create Artifacts for Java Application
			Slave2 ===> Python
			Slave3 ===> .Net
			Slave4 ===> NodeJs
			Slave5 ===> Angular
				 50 ===> 

Virtual Machines!!!!

	Jenkins-Master
	
		Virtual Machine --> Docker Container Engine 


DEV Team :

	DEV-Environment					==> TEST Environment 				==> Prod. Environment
	(jdk1.8,tomcat8)						QA(jdk1.7,tomcat7)
	created *.war							UAT
	(Package: *.war,jdk1.8,tomcat8)			Staging Environment
	Image - Docker Image 
	Container Registry (docker hub)
	AWS EKS
	Az	AKS
	GCP

Container Orchestration!  Docker Swarm 

	Monolithic Application Architecture!
				(vs)
	Microservice Based Architecture!

Web-Based applications!!!

Monolithic Application Architecture!

Process --> 	
	E-Commerce :
		sign-up
		sign-in
		search
		purchase
		payment

All these process are deployed as single service/application!	(Stateful / Stateless Application)

Microservice Based Architecture!
Process --> 	
	E-Commerce :
		sign-up		--> collect the user data, validate the user data, store in dbase
		sign-in			v1.0		==> v1.1 validate the user data
		search
		purchase
		payment

All these process are deployed as independent service! === > shd be deployed as containers 


	1 service === 1 process ====> Microservice
	
DownTime!

Container Orchestrator!!!		Kubernetes

		To Ensure High Availability of containers
		Quickly revert / rollback the changes 
		Load-Balancer

Docker Swarm 		vs 			Kubernetes

Docker-Compose -- Manifest File *.yaml to manage multiple containers!
				*.war
				tomcat 
				mysql 

Dockerfile is used to build docker images!
 
Created Multiple Containers :::

docker ps -a

	DEV-Team
			Stateless	- (*.war/jdk1.8/nginx-1.1.9)  ==
			
			Stateful 
						- (*.war/jdk1.8/nginx-1.1.9)  ==  (Needs some volume)   container-v1.1 - Active Container
																				container-v1.1 - Passive Container

						- (*.war/jdk1.8/nginx-1.1.9)  ==  (Needs some volume) 	container-v1.1 - Active Container	
																				(Run Webapp, mysql db)

						- Config files / Secrets / Security Vaults
						
Container Pattern 


Application Point!!! ===>> 

Kubernetes Architecture!
	Kubernetes Master & Worker Nodes!
	
	
Next :
	
	Installation Process & pre-requisities
	Kubectl commands with parameters
	How to config Kubernetes Cluster!

@@@@@@@
DAY-2
@@@@@@@


Installation Process & pre-requisities

	Install Kubernetes Master and Configure Worker Nodes!
	
	Installation :::
	
		- 	Minikube
		-	play with kubernetes
		-	play with docker
		-	Kubeadm 
		-	Using Managed Services ( AWS/Az/GCP )
		
		
Kube-Master	, WN1, WN2 ...100

	Run some Pods 
		DEV		Namespace 
		QA
		UAT
		PROD 
		
Create a POD

Manifest file ---> *.yaml

How to write yaml script for Kubernetes!!!


@@@@@@@
DAY-3
@@@@@@@


Kubernetes is meant for deployments!!!


Non-Prod							Prod
Qa,UAT,Staging						PROD 


Build Servers

	Build, create artifacts
	Build the docker image 


Deployment Servers :

Kubernetes	
			Cluster 
				WN1.....100
			DEV
			QA 
			UAT 
			Pre-Prod 			
			
			PROD Cluster1 
			PROD_NS

			PROD Cluster2
			PROD_NS
			
			
Kube-Master - 

Cluster
	WN1
	WN2
	WN3
	
	
	
	PODS -->>
	
	
Controller Manager!!

	Replication Controller
	Replicasets
	Daemonsets
	Deployments


If the inst is down.
If we go for any upgrade/rollback of appln.


Summary:

	Pods
		exec
		expose 
	RC
	RS
	
	
Next :

	Daemonsets
	Deployments

@@@@@@@
DAY-4
@@@@@@@
	
Next :

	Daemonsets
	Deployments

Volumes:
	Configmaps
	secrets
	
	
Difference between : RC & RS


Scheduler!!!!

	POD ===> 
	wn1......wn10
	
	Pod1 ==> dbase engine / Volume SSD ==>

Deployments ::

	ZERO Downtime!!!!
	
	Types of Deployments:
	
	Recreate:  ---> Applicable only in Non-Prod 
	
		5 copies of pods 			tomcat-v1.0
									tomcat-v1.1
									
									
	
	Rolling Update	-- to ensure zero down. 
	
		1 - v1.1
		2 - v1.1
		3 - v1.1
	
	Canary:	
									tomcat-v1.1
		deployment will first done for the specific user group
				
		Software Versions : 
		Beta Version ?		
		
		Ecommerce portal::
								v1.1
								
								v1.2 == Beta Version 

	Blue-Green Deployment :

		*Live Production server!!! - v.1.1 	---->>>>	Passive Server - v.1.2(Active)		
		
	Migration Project!!!
	
	Legacy On-Premises System 							=====>  AWS Cloud Platform
	*Live Production server!!! - v.1.1						*Live Production server!!! - v.1.1
	
DevOps Process


	Tomcat -- Appln. server 
	
	
	JavaAppln -- v1.0 -- docker image -- pushed to docker hub
	JavaAppln -- v1.1 -- docker image -- pushed to docker hub
	JavaAppln -- v1.2 -- docker image -- pushed to docker hub
	JavaAppln -- v1.3 -- docker image -- pushed to docker hub
	
	
	

DEV Environment							>>			QA			>>			QAT				>>		PROD
Build
Create Docker 					
Image
Pacakage
(*.war, dependencies-nginx/tomcat,
Configuration_file_QA)

(*.war, dependencies-nginx/tomcat,
Configuration_file_UAT)

(*.war, dependencies-nginx/tomcat,
Configuration_file_PROD)

Package:
(*.war, dependencies-nginx/tomcat)					(*.war, dependencies-nginx/tomcat) - Secrets!

(*.war, dependencies-nginx/tomcat)

(*.war, dependencies-nginx/tomcat)


Dbase:

Secrets!


Configuration_file_QA
Configuration_file_UAT
Configuration_file_PROD


Pubished to 
Docker HUB 

	
	Host Volumes :::
		Config_file
		Secrets
	
	
	Config_Maps
		Pass some config data :: environment variables, arguments, 
	Secrets 
	
	
